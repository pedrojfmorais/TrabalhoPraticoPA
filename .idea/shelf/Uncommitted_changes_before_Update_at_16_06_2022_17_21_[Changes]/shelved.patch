Index: TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoE.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.isec.pa.apoio_poe.model.data;\r\n\r\nimport pt.isec.pa.apoio_poe.model.data.pessoas.alunos.Aluno;\r\nimport pt.isec.pa.apoio_poe.model.data.pessoas.Docente;\r\nimport pt.isec.pa.apoio_poe.model.data.propostas.*;\r\nimport pt.isec.pa.apoio_poe.model.errorHandling.ErrorOccurred;\r\nimport pt.isec.pa.apoio_poe.model.errorHandling.ErrorType;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class ApoioPoE implements Serializable, Cloneable {\r\n\r\n   @Serial\r\n   private static final long serialVersionUID = 1L;\r\n   private int faseBloqueada;\r\n\r\n   private final HashMap<Long, Aluno> alunos;\r\n   private final HashMap<String, Docente> docentes;\r\n   private final HashMap<String, Proposta> propostas;\r\n   private final HashMap<Long, Candidatura> candidaturas;\r\n   private final HashMap<String, PropostaAtribuida> propostasAtribuidas;\r\n\r\n   public ApoioPoE() {\r\n      alunos = new HashMap<>();\r\n      docentes = new HashMap<>();\r\n      propostas = new HashMap<>();\r\n      candidaturas = new HashMap<>();\r\n      propostasAtribuidas = new HashMap<>();\r\n\r\n      faseBloqueada = 0;\r\n   }\r\n\r\n   public int getFaseBloqueada() {\r\n      return faseBloqueada;\r\n   }\r\n\r\n   public void setFaseBloqueada(int faseBloqueada) {\r\n      this.faseBloqueada = faseBloqueada;\r\n   }\r\n\r\n   public boolean adicionaAluno(long nAluno, String nome, String email, String siglaCurso, String siglaRamo,\r\n                                double classificacao, boolean acessoEstagio) {\r\n\r\n      if (alunos.containsKey(nAluno)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.DUPLICATED_NUMERO_ALUNO);\r\n         return false;\r\n      }\r\n\r\n      if (docentes.containsKey(email)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.DUPLICATED_EMAIL);\r\n         return false;\r\n      }\r\n\r\n      for (var aluno : alunos.values())\r\n         if (aluno.getEmail().equals(email)) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.DUPLICATED_EMAIL);\r\n            return false;\r\n         }\r\n\r\n      if (!Aluno.cursos.contains(siglaCurso)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_CURSO);\r\n         return false;\r\n      }\r\n\r\n      if (!Aluno.ramos.contains(siglaRamo)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_RAMO);\r\n         return false;\r\n      }\r\n\r\n      if (classificacao > 1.0 || classificacao < 0.0) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_CLASSIFICACAO);\r\n         return false;\r\n      }\r\n\r\n      alunos.put(nAluno, new Aluno(nAluno, nome, email, siglaCurso, siglaRamo, classificacao, acessoEstagio));\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean adicionaDocente(String nome, String email) {\r\n\r\n      if (docentes.containsKey(email)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.DUPLICATED_EMAIL);\r\n         return false;\r\n      }\r\n\r\n      for (var aluno : alunos.values())\r\n         if (aluno.getEmail().equals(email)) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.DUPLICATED_EMAIL);\r\n            return false;\r\n         }\r\n\r\n      docentes.put(email, new Docente(nome, email));\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean adicionaProposta(String tipo, String id, String titulo, long nAlunoAssociado,\r\n                                   String areasDestino, String entidadeOuDocente) {\r\n\r\n      if (propostas.containsKey(id)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.DUPLICATED_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      if (!alunos.containsKey(nAlunoAssociado)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_NUMERO_ALUNO);\r\n         return false;\r\n      }\r\n\r\n      String[] areas = areasDestino.trim().split(\"\\\\|\");\r\n      if (!Aluno.ramos.containsAll(List.of(areas))) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_RAMO);\r\n         return false;\r\n      }\r\n\r\n      for (var proposta : this.propostas.values())\r\n         if (proposta.getNAlunoAssociado() == nAlunoAssociado) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.ALUNO_JA_TEM_PROPOSTA);\r\n            return false;\r\n         }\r\n\r\n      switch (tipo) {\r\n         case \"T1\" -> propostas.put(id, new Estagio(id, titulo, nAlunoAssociado, areasDestino, entidadeOuDocente));\r\n         case \"T2\" -> {\r\n\r\n            if (!docentes.containsKey(entidadeOuDocente)) {\r\n               ErrorOccurred.getInstance().setError(ErrorType.INVALID_DOCENTE);\r\n               return false;\r\n            }\r\n\r\n            propostas.put(id, new Projeto(id, titulo, nAlunoAssociado, areasDestino, entidadeOuDocente));\r\n         }\r\n         default -> {\r\n            return false;\r\n         }\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean adicionaProposta(String tipo, String id, String titulo,\r\n                                   String areasDestino, String entidadeOuDocente) {\r\n\r\n      if (propostas.containsKey(id)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.DUPLICATED_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      String[] areas = areasDestino.trim().split(\"\\\\|\");\r\n\r\n      if (!Aluno.ramos.containsAll(List.of(areas))) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_RAMO);\r\n         return false;\r\n      }\r\n\r\n      switch (tipo) {\r\n         case \"T1\" -> propostas.put(id, new Estagio(id, titulo, areasDestino, entidadeOuDocente));\r\n         case \"T2\" -> {\r\n\r\n            if (!docentes.containsKey(entidadeOuDocente)) {\r\n               ErrorOccurred.getInstance().setError(ErrorType.INVALID_DOCENTE);\r\n               return false;\r\n            }\r\n\r\n            propostas.put(id, new Projeto(id, titulo, areasDestino, entidadeOuDocente));\r\n         }\r\n         default -> {\r\n            return false;\r\n         }\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean adicionaProposta(String tipo, String id, String titulo, long nAlunoAssociado) {\r\n\r\n      if (propostas.containsKey(id)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.DUPLICATED_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      if (!alunos.containsKey(nAlunoAssociado)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_NUMERO_ALUNO);\r\n         return false;\r\n      }\r\n\r\n      for (var proposta : propostas.values())\r\n         if (proposta.getNAlunoAssociado() == nAlunoAssociado) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.ALUNO_JA_TEM_PROPOSTA);\r\n            return false;\r\n         }\r\n\r\n      if (\"T3\".equals(tipo)) {\r\n         propostas.put(id, new Autoproposto(id, titulo, nAlunoAssociado));\r\n      } else\r\n         return false;\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean adicionaCandidatura(long nAluno, ArrayList<String> propostas) {\r\n\r\n      if (propostas.isEmpty()) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      if (candidaturas.containsKey(nAluno)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.ALUNO_JA_TEM_CANDIDATURA);\r\n         return false;\r\n      }\r\n\r\n      if (!alunos.containsKey(nAluno)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_NUMERO_ALUNO);\r\n         return false;\r\n      }\r\n\r\n      for (var proposta : propostas) {\r\n         if (!this.propostas.containsKey(proposta)) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.INVALID_ID_PROPOSTA);\r\n            return false;\r\n         }\r\n\r\n         if (this.propostas.get(proposta).getNAlunoAssociado() != 0) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.PROPOSTA_JA_TEM_ALUNO_ASSOCIADO);\r\n            return false;\r\n         }\r\n\r\n         Proposta propostaAtual = this.propostas.get(proposta);\r\n\r\n         boolean areaDoAlunoCorrespondeADaProposta = false;\r\n         if(propostaAtual instanceof Estagio e) {\r\n            for (var area : e.getAreasDestino().split(\"\\\\|\"))\r\n               if (area.equals(alunos.get(nAluno).getSiglaRamo()))\r\n                  areaDoAlunoCorrespondeADaProposta = true;\r\n\r\n         } else if(propostaAtual instanceof Projeto p) {\r\n            for (var area : p.getRamosDestino().split(\"\\\\|\"))\r\n               if (area.equals(alunos.get(nAluno).getSiglaRamo()))\r\n                  areaDoAlunoCorrespondeADaProposta = true;\r\n         }\r\n\r\n         if(!areaDoAlunoCorrespondeADaProposta){\r\n            ErrorOccurred.getInstance().setError(ErrorType.ALUNO_PROPOSTA_AREA_NAO_CORRESPONDEM);\r\n            return false;\r\n         }\r\n\r\n      }\r\n\r\n      for (var proposta : this.propostas.values())\r\n         if (proposta.getNAlunoAssociado() == nAluno) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.ALUNO_JA_TEM_PROPOSTA);\r\n            return false;\r\n         }\r\n\r\n\r\n\r\n      HashSet<String> testeDuplicados = new HashSet<>(propostas);\r\n      if (testeDuplicados.size() != propostas.size()) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.DUPLICATED_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n      candidaturas.put(nAluno, new Candidatura(nAluno, propostas));\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean atribuirPropostaAluno(String idProposta, long nAluno) {\r\n\r\n      int ordemPreferencia = 1;\r\n\r\n      if (propostasAtribuidas.containsKey(idProposta)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.PROPOSTA_JA_FOI_ATRIBUIDA);\r\n         return false;\r\n      }\r\n\r\n      Proposta propostaAtual = propostas.get(idProposta);\r\n\r\n      if (propostaAtual == null) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      if (!alunos.containsKey(nAluno)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_NUMERO_ALUNO);\r\n         return false;\r\n      }\r\n\r\n      for (var propostaAtribuida : propostasAtribuidas.values())\r\n         if (propostaAtribuida.getNAlunoAssociado() == nAluno) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.ALUNO_JA_TEM_PROPOSTA);\r\n            return false;\r\n         }\r\n\r\n      boolean areaDoAlunoCorrespondeADaProposta = false;\r\n      if(propostaAtual instanceof Estagio e) {\r\n         for (var area : e.getAreasDestino().split(\"\\\\|\"))\r\n            if (area.equals(alunos.get(nAluno).getSiglaRamo()))\r\n               areaDoAlunoCorrespondeADaProposta = true;\r\n\r\n      } else if(propostaAtual instanceof Projeto p) {\r\n         for (var area : p.getRamosDestino().split(\"\\\\|\"))\r\n            if (area.equals(alunos.get(nAluno).getSiglaRamo()))\r\n               areaDoAlunoCorrespondeADaProposta = true;\r\n      }\r\n\r\n      if(!areaDoAlunoCorrespondeADaProposta){\r\n         ErrorOccurred.getInstance().setError(ErrorType.ALUNO_PROPOSTA_AREA_NAO_CORRESPONDEM);\r\n         return false;\r\n      }\r\n\r\n      Candidatura candidaturaAluno = getCandidatura(nAluno);\r\n      if (candidaturaAluno != null) {\r\n         for (var idProp : candidaturaAluno.getIdPropostas()) {\r\n\r\n            if (idProp.equals(idProposta)) {\r\n               ordemPreferencia = candidaturaAluno.getIdPropostas().indexOf(idProp) + 1;\r\n               break;\r\n            }\r\n         }\r\n      }\r\n\r\n      propostasAtribuidas.put(idProposta, new PropostaAtribuida(idProposta, propostaAtual.getTitulo(),\r\n              nAluno, ordemPreferencia));\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean atribuicaoAutomaticaPropostasComAluno() {\r\n\r\n      HashSet<Proposta> propostasAtribuir = new HashSet<>();\r\n\r\n      for (var proposta : propostas.values())\r\n\r\n         if (proposta instanceof Autoproposto || (proposta instanceof Projeto && proposta.getNAlunoAssociado() != 0))\r\n            propostasAtribuir.add(proposta);\r\n\r\n      if (propostasAtribuir.isEmpty())\r\n         return false;\r\n\r\n      for (var p : propostasAtribuir)\r\n         atribuirPropostaAluno(p.getId(), p.getNAlunoAssociado());\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean atribuirPropostaDocenteOrientador(String idProposta, String email) {\r\n\r\n      if (!propostasAtribuidas.containsKey(idProposta) && propostas.containsKey(idProposta)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.PROPOSTA_AINDA_NAO_ATRIBUIDA);\r\n         return false;\r\n      }\r\n\r\n      if (!propostas.containsKey(idProposta)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      if (!docentes.containsKey(email)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_DOCENTE);\r\n         return false;\r\n      }\r\n\r\n      propostasAtribuidas.get(idProposta).setEmailDocenteOrientador(email);\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean associacaoAutomaticaDocentesProponentes() {\r\n\r\n      boolean associadoAlgum = false;\r\n\r\n      for (var propostaAtribuida : getPropostasAtribuidas()) {\r\n\r\n         if (getProposta(propostaAtribuida.getId()) instanceof Projeto p) {\r\n            propostaAtribuida.setEmailDocenteOrientador(p.getEmailDocente());\r\n            associadoAlgum = true;\r\n         }\r\n      }\r\n\r\n      return associadoAlgum;\r\n   }\r\n\r\n   public Aluno getAluno(long nAluno) {\r\n      Aluno aux = alunos.get(nAluno);\r\n      return aux != null ? aux.clone() : null;\r\n   }\r\n\r\n   public Docente getDocente(String email) {\r\n      Docente aux = docentes.get(email);\r\n      return aux != null ? aux.clone() : null;\r\n   }\r\n\r\n   public Proposta getProposta(String id) {\r\n      Proposta aux = propostas.get(id);\r\n      return aux != null ? aux.clone() : null;\r\n   }\r\n\r\n   public Candidatura getCandidatura(long nAluno) {\r\n      Candidatura aux = candidaturas.get(nAluno);\r\n      return aux != null ? aux.clone() : null;\r\n   }\r\n\r\n   public PropostaAtribuida getPropostaAtribuida(String id) {\r\n      PropostaAtribuida aux = propostasAtribuidas.get(id);\r\n      return aux != null ? aux.clone() : null;\r\n   }\r\n\r\n   public ArrayList<Aluno> getAlunos() {\r\n      ArrayList<Aluno> alunosOrdenados = new ArrayList<>(alunos.values());\r\n\r\n      Collections.sort(alunosOrdenados);\r\n      return (ArrayList<Aluno>) alunosOrdenados.clone();\r\n   }\r\n\r\n   public ArrayList<Docente> getDocentes() {\r\n      ArrayList<Docente> docentesOrdenados = new ArrayList<>(docentes.values());\r\n\r\n      Collections.sort(docentesOrdenados);\r\n      return (ArrayList<Docente>) docentesOrdenados.clone();\r\n   }\r\n\r\n   public ArrayList<Proposta> getPropostas() {\r\n      ArrayList<Proposta> propostasOrdenadas = new ArrayList<>(propostas.values());\r\n      Collections.sort(propostasOrdenadas);\r\n      return (ArrayList<Proposta>) propostasOrdenadas.clone();\r\n   }\r\n\r\n   public ArrayList<Candidatura> getCandidaturas() {\r\n      ArrayList<Candidatura> candidaturasOrdenadas = new ArrayList<>(candidaturas.values());\r\n      Collections.sort(candidaturasOrdenadas);\r\n      return (ArrayList<Candidatura>) candidaturasOrdenadas.clone();\r\n   }\r\n\r\n   public ArrayList<PropostaAtribuida> getPropostasAtribuidas() {\r\n      ArrayList<PropostaAtribuida> propostaAtribuidaOrdenadas = new ArrayList<>(propostasAtribuidas.values());\r\n      Collections.sort(propostaAtribuidaOrdenadas);\r\n      return (ArrayList<PropostaAtribuida>) propostaAtribuidaOrdenadas.clone();\r\n   }\r\n\r\n   public boolean removeAluno(long nAluno) {\r\n\r\n      if(!alunos.containsKey(nAluno)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_NUMERO_ALUNO);\r\n         return false;\r\n      }\r\n\r\n      if(candidaturas.containsKey(nAluno))\r\n         removeCandidatura(nAluno);\r\n\r\n      ArrayList<String> propostasRemover = new ArrayList<>();\r\n\r\n      for (var proposta : getPropostas()) {\r\n         if (proposta instanceof Autoproposto && proposta.getNAlunoAssociado() == nAluno)\r\n            propostasRemover.add(proposta.getId());\r\n\r\n         if (proposta.getNAlunoAssociado() == nAluno)\r\n            proposta.setNAlunoAssociado(0);\r\n      }\r\n\r\n      for (var p : propostasRemover)\r\n         removeProposta(p);\r\n\r\n      //já é removida a proposta atribuida ou no removeCandidatura() ou no removeProposta()\r\n\r\n      return alunos.remove(nAluno) != null;\r\n   }\r\n\r\n   public boolean removeDocente(String email) {\r\n\r\n      if(!docentes.containsKey(email)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_DOCENTE);\r\n         return false;\r\n      }\r\n\r\n      ArrayList<String> propostasRemover = new ArrayList<>();\r\n\r\n      for (var proposta : getPropostas())\r\n         if (proposta instanceof Projeto p)\r\n            if (p.getEmailDocente().equals(email))\r\n               propostasRemover.add(proposta.getId());\r\n\r\n      for (var idPropostaRemover : propostasRemover)\r\n         removeProposta(idPropostaRemover);\r\n\r\n      for (var propostaAtribuida : getPropostasAtribuidas())\r\n         if (propostaAtribuida.getEmailDocenteOrientador().equals(email))\r\n            removeOrientadorPropostaAtribuida(propostaAtribuida.getId());\r\n\r\n      return docentes.remove(email) != null;\r\n   }\r\n\r\n   public boolean removeProposta(String id) {\r\n\r\n      if(!propostas.containsKey(id)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      if(propostasAtribuidas.containsKey(id))\r\n         removePropostaAtribuida(id);\r\n\r\n      for (var candidatura : getCandidaturas()) {\r\n         candidatura.removeProposta(id);\r\n\r\n         if (candidatura.getIdPropostas().isEmpty())\r\n            removeCandidatura(candidatura.getNAluno());\r\n      }\r\n\r\n      return propostas.remove(id) != null;\r\n   }\r\n\r\n   public boolean removeCandidatura(long nAluno) {\r\n\r\n      if(!candidaturas.containsKey(nAluno)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_ID_CANDIDATURA);\r\n         return false;\r\n      }\r\n\r\n      if (getCandidatura(nAluno) == null)\r\n         return false;\r\n\r\n      for (var propostaAtribuida : getPropostasAtribuidas())\r\n         if (propostaAtribuida.getNAlunoAssociado() == nAluno)\r\n            removePropostaAtribuida(propostaAtribuida.getId());\r\n\r\n      return candidaturas.remove(nAluno) != null;\r\n   }\r\n\r\n   public boolean removePropostaAtribuida(String id) {\r\n\r\n      if(!propostas.containsKey(id)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      return propostasAtribuidas.remove(id) != null;\r\n   }\r\n\r\n   public boolean removeOrientadorPropostaAtribuida(String id) {\r\n\r\n      if (!propostas.containsKey(id)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      if (propostasAtribuidas.get(id) == null) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.PROPOSTA_AINDA_NAO_ATRIBUIDA);\r\n         return false;\r\n      }\r\n\r\n      propostasAtribuidas.get(id).setEmailDocenteOrientador(null);\r\n\r\n      return propostasAtribuidas.get(id).getEmailDocenteOrientador() == null;\r\n   }\r\n\r\n   public boolean propostasSufecienteParaRamo(String ramo) {\r\n      return propostasPorRamo(ramo) >= nAlunosPorRamo(ramo);\r\n   }\r\n\r\n   public int propostasPorRamo(String ramo){\r\n      int contadorPropostaRamo = 0;\r\n\r\n      for (var proposta : propostas.values()) {\r\n\r\n         if (proposta instanceof Projeto p) {\r\n\r\n            if (List.of(p.getRamosDestino().split(\"\\\\|\")).contains(ramo))\r\n               contadorPropostaRamo++;\r\n\r\n         } else if (proposta instanceof Estagio e) {\r\n\r\n            if (List.of(e.getAreasDestino().split(\"\\\\|\")).contains(ramo))\r\n               contadorPropostaRamo++;\r\n         }\r\n      }\r\n      return contadorPropostaRamo;\r\n   }\r\n\r\n   public int nAlunosPorRamo(String ramo){\r\n      int contadorAlunosRamo = 0;\r\n\r\n      for (var aluno : alunos.values())\r\n         if (aluno.getSiglaRamo().equals(ramo))\r\n            contadorAlunosRamo++;\r\n\r\n      return contadorAlunosRamo;\r\n   }\r\n\r\n   public boolean todasCandidaturasComPropostaAtribuida() {\r\n\r\n      ArrayList<Long> alunosComPropostaAtribuida = new ArrayList<>();\r\n\r\n      for (var propostasAtribuida : propostasAtribuidas.values())\r\n         alunosComPropostaAtribuida.add(propostasAtribuida.getNAlunoAssociado());\r\n\r\n      return alunosComPropostaAtribuida.containsAll(candidaturas.keySet());\r\n   }\r\n\r\n   public int calculaNumeroOrientacoesDocente(String email) {\r\n      int contador = 0;\r\n\r\n      for (var propostaAtribuida : getPropostasAtribuidas())\r\n         if (propostaAtribuida.getEmailDocenteOrientador() != null &&\r\n                 propostaAtribuida.getEmailDocenteOrientador().equals(email))\r\n            contador++;\r\n\r\n      return contador;\r\n   }\r\n\r\n   private ApoioPoE(ApoioPoE apoioPoE) {\r\n\r\n      this.faseBloqueada = apoioPoE.faseBloqueada;\r\n\r\n      this.alunos = new HashMap<>();\r\n      this.docentes = new HashMap<>();\r\n      this.propostas = new HashMap<>();\r\n      this.candidaturas = new HashMap<>();\r\n      this.propostasAtribuidas = new HashMap<>();\r\n\r\n      // deep copy dos HashMap\r\n      for (var key : apoioPoE.alunos.keySet())\r\n         this.alunos.put(key, apoioPoE.alunos.get(key).clone());\r\n\r\n      for (var key : apoioPoE.docentes.keySet())\r\n         this.docentes.put(key, apoioPoE.docentes.get(key).clone());\r\n\r\n      for (var key : apoioPoE.propostas.keySet())\r\n         this.propostas.put(key, apoioPoE.propostas.get(key).clone());\r\n\r\n      for (var key : apoioPoE.candidaturas.keySet())\r\n         this.candidaturas.put(key, apoioPoE.candidaturas.get(key).clone());\r\n\r\n      for (var key : apoioPoE.propostasAtribuidas.keySet())\r\n         this.propostasAtribuidas.put(key, apoioPoE.propostasAtribuidas.get(key).clone());\r\n   }\r\n\r\n   @Override\r\n   protected ApoioPoE clone() {\r\n      return new ApoioPoE(this);\r\n   }\r\n\r\n   public String getTipoProposta(String id) {\r\n\r\n      if (getProposta(id) == null)\r\n         return null;\r\n\r\n      return getProposta(id).tipoProposta();\r\n   }\r\n\r\n   public boolean editaAluno(long nAluno, String nome, String siglaCurso, String siglaRamo,\r\n                             String classificacao, String acessoEstagio) {\r\n\r\n      double dClassificacao = 0.0;\r\n\r\n      if (!alunos.containsKey(nAluno)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_NUMERO_ALUNO);\r\n         return false;\r\n      }\r\n\r\n      if (!siglaCurso.isBlank())\r\n         if (!Aluno.cursos.contains(siglaCurso)) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.INVALID_CURSO);\r\n            return false;\r\n         }\r\n\r\n      if (!siglaRamo.isBlank())\r\n         if (!Aluno.ramos.contains(siglaRamo)) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.INVALID_RAMO);\r\n            return false;\r\n         }\r\n\r\n      if (!classificacao.isBlank()) {\r\n         dClassificacao = Double.parseDouble(classificacao);\r\n\r\n         if (dClassificacao > 1.0 || dClassificacao < 0.0) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.INVALID_CLASSIFICACAO);\r\n            return false;\r\n         }\r\n      }\r\n\r\n      Aluno aluno = alunos.get(nAluno);\r\n\r\n      if (!nome.isBlank())\r\n         aluno.setNome(nome);\r\n\r\n      if (!siglaCurso.isBlank())\r\n         aluno.setSiglaCurso(siglaCurso);\r\n\r\n      if (!siglaRamo.isBlank())\r\n         aluno.setSiglaRamo(siglaRamo);\r\n\r\n      if (!classificacao.isBlank())\r\n         aluno.setClassificacao(dClassificacao);\r\n\r\n      if (!acessoEstagio.isBlank())\r\n         aluno.setAcessoEstagio(Boolean.parseBoolean(acessoEstagio));\r\n\r\n      return true;\r\n\r\n   }\r\n\r\n   public boolean editaDocente(String email, String nome) {\r\n\r\n      if (!docentes.containsKey(email)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_DOCENTE);\r\n         return false;\r\n      }\r\n\r\n      if (nome.isBlank())\r\n         return false;\r\n\r\n      docentes.get(email).setNome(nome);\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean editaProposta(String id, String titulo, String ramos, String entidade_docente, String nAluno) {\r\n\r\n      if (!propostas.containsKey(id)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      String[] array_ramos = ramos.trim().split(\"\\\\|\");\r\n      if (!ramos.isBlank() && !Aluno.ramos.containsAll(List.of(array_ramos))) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_RAMO);\r\n         return false;\r\n      }\r\n\r\n      if (!nAluno.isBlank()) {\r\n         if (!alunos.containsKey(Long.parseLong(nAluno)) && !nAluno.equals(\"0\")) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.INVALID_NUMERO_ALUNO);\r\n            return false;\r\n         }\r\n\r\n         for (var proposta : this.propostas.values())\r\n            if (proposta.getNAlunoAssociado() == Long.parseLong(nAluno) && !proposta.getId().equals(id) && !nAluno.equals(\"0\")) {\r\n               ErrorOccurred.getInstance().setError(ErrorType.ALUNO_JA_TEM_PROPOSTA);\r\n               return false;\r\n            }\r\n      }\r\n\r\n      Proposta proposta = propostas.get(id);\r\n\r\n      if (!titulo.isBlank())\r\n         proposta.setTitulo(titulo);\r\n\r\n      if (!nAluno.isBlank())\r\n         proposta.setNAlunoAssociado(Long.parseLong(nAluno));\r\n\r\n      if (proposta instanceof Estagio e) {\r\n\r\n         if (!entidade_docente.isBlank())\r\n            e.setEntidadeAcolhimento(entidade_docente);\r\n\r\n         if (!ramos.isBlank())\r\n            e.setAreasDestino(ramos);\r\n      }\r\n\r\n      if (proposta instanceof Projeto p) {\r\n         if (!entidade_docente.isBlank())\r\n            p.setEmailDocente(entidade_docente);\r\n\r\n         if (!ramos.isBlank())\r\n            p.setRamosDestino(ramos);\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean editaProposta(String id, String titulo, String nAluno) {\r\n\r\n      if (!propostas.containsKey(id)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      if (!nAluno.isBlank()) {\r\n         if (!alunos.containsKey(Long.parseLong(nAluno)) && !nAluno.equals(\"0\")) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.INVALID_NUMERO_ALUNO);\r\n            return false;\r\n         }\r\n\r\n         for (var proposta : this.propostas.values())\r\n            if (proposta.getNAlunoAssociado() == Long.parseLong(nAluno) && !proposta.getId().equals(id) && !nAluno.equals(\"0\")) {\r\n               ErrorOccurred.getInstance().setError(ErrorType.ALUNO_JA_TEM_PROPOSTA);\r\n               return false;\r\n            }\r\n      }\r\n\r\n      Proposta proposta = propostas.get(id);\r\n\r\n      if (!titulo.isBlank())\r\n         proposta.setTitulo(titulo);\r\n\r\n      if (!nAluno.isBlank())\r\n         proposta.setNAlunoAssociado(Long.parseLong(nAluno));\r\n\r\n      return true;\r\n   }\r\n\r\n   public boolean editaCandidatura(long nAluno, ArrayList<String> propostas) {\r\n\r\n      if (propostas.isEmpty()) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.SEM_PROPOSTAS_ESPECIFICADAS);\r\n         return false;\r\n      }\r\n\r\n      if (!alunos.containsKey(nAluno)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.INVALID_NUMERO_ALUNO);\r\n         return false;\r\n      }\r\n\r\n      if (!candidaturas.containsKey(nAluno)) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.ALUNO_NAO_TEM_CANDIDATURA);\r\n         return false;\r\n      }\r\n\r\n      for (var proposta : propostas) {\r\n         if (!this.propostas.containsKey(proposta)) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.INVALID_ID_PROPOSTA);\r\n            return false;\r\n         }\r\n\r\n         if (this.propostas.get(proposta).getNAlunoAssociado() != 0) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.PROPOSTA_JA_TEM_ALUNO_ASSOCIADO);\r\n            return false;\r\n         }\r\n      }\r\n\r\n      HashSet<String> testeDuplicados = new HashSet<>(propostas);\r\n      if (testeDuplicados.size() != propostas.size()) {\r\n         ErrorOccurred.getInstance().setError(ErrorType.DUPLICATED_ID_PROPOSTA);\r\n         return false;\r\n      }\r\n\r\n      candidaturas.get(nAluno).setIdPropostas(propostas);\r\n\r\n      return true;\r\n   }\r\n\r\n   public ArrayList<Aluno> consultarAlunosFase5(boolean comPropostaAtribuida){\r\n\r\n      HashSet<Aluno> resultado = new HashSet<>();\r\n\r\n      if(comPropostaAtribuida)\r\n\r\n         for (var propostasAtribuidas : propostasAtribuidas.values())\r\n            resultado.add(alunos.get(propostasAtribuidas.getNAlunoAssociado()));\r\n\r\n      else{\r\n         HashSet<Long> alunosComProposta = new HashSet<>();\r\n\r\n         for(var propostasAtribuidas : propostasAtribuidas.values())\r\n            alunosComProposta.add(propostasAtribuidas.getNAlunoAssociado());\r\n\r\n         for(var aluno : alunos.values())\r\n            if(!alunosComProposta.contains(aluno.getNAluno()) && candidaturas.get(aluno.getNAluno()) != null)\r\n               resultado.add(aluno);\r\n      }\r\n\r\n      ArrayList<Aluno> resultadoOrdenado = new ArrayList<>(resultado);\r\n      Collections.sort(resultadoOrdenado);\r\n\r\n      return resultadoOrdenado;\r\n   }\r\n\r\n   public ArrayList<Aluno> consultarAlunos(boolean comOrientadorAssociado) {\r\n\r\n      HashSet<Aluno> resultado = new HashSet<>();\r\n\r\n      if (comOrientadorAssociado) {\r\n         for (var propostasAtribuidas : propostasAtribuidas.values())\r\n            if (propostasAtribuidas.getEmailDocenteOrientador() != null)\r\n               resultado.add(alunos.get(propostasAtribuidas.getNAlunoAssociado()));\r\n      } else\r\n         for (var propostasAtribuidas : propostasAtribuidas.values())\r\n            if (propostasAtribuidas.getEmailDocenteOrientador() == null)\r\n               resultado.add(alunos.get(propostasAtribuidas.getNAlunoAssociado()));\r\n\r\n      ArrayList<Aluno> resultadoOrdenado = new ArrayList<>(resultado);\r\n      Collections.sort(resultadoOrdenado);\r\n\r\n      return resultadoOrdenado;\r\n   }\r\n\r\n   public ArrayList<Aluno> consultarAlunos(boolean autoproposta, boolean comCandidatura, boolean semCandidatura) {\r\n      HashSet<Aluno> resultado = new HashSet<>();\r\n\r\n      if (!autoproposta && !comCandidatura && !semCandidatura)\r\n         resultado = new HashSet<>(alunos.values());\r\n\r\n      if (autoproposta) {\r\n         for (var proposta : propostas.values())\r\n            if (proposta instanceof Autoproposto)\r\n               resultado.add(alunos.get(proposta.getNAlunoAssociado()));\r\n      }\r\n\r\n      if (comCandidatura) {\r\n         for (var candidatura : candidaturas.values())\r\n            resultado.add(alunos.get(candidatura.getNAluno()));\r\n      }\r\n\r\n      if (semCandidatura) {\r\n         HashSet<Long> alunosComCandidatura = new HashSet<>();\r\n\r\n         for (var candidatura : candidaturas.values())\r\n            alunosComCandidatura.add(candidatura.getNAluno());\r\n\r\n         for (var aluno : alunos.values())\r\n            if (!alunosComCandidatura.contains(aluno.getNAluno()))\r\n               resultado.add(aluno);\r\n      }\r\n\r\n      ArrayList<Aluno> resultadoOrdenado = new ArrayList<>(resultado);\r\n      Collections.sort(resultadoOrdenado);\r\n\r\n      return resultadoOrdenado;\r\n   }\r\n\r\n   public ArrayList<Aluno> consultarAlunos(boolean autoproposta, boolean comCandidatura, boolean comPropostaAtribuida, boolean semPropostaAtribuida) {\r\n\r\n      HashSet<Aluno> resultado = new HashSet<>();\r\n      HashSet<Aluno> resultadoComPropostaAtribuida = new HashSet<>();\r\n\r\n      if (!autoproposta && !comCandidatura && !comPropostaAtribuida && !semPropostaAtribuida)\r\n         resultado = new HashSet<>(alunos.values());\r\n\r\n      if (autoproposta) {\r\n         for (var proposta : propostas.values())\r\n            if (proposta instanceof Autoproposto)\r\n               resultado.add(alunos.get(proposta.getNAlunoAssociado()));\r\n      }\r\n\r\n      if (comCandidatura) {\r\n         for (var candidatura : candidaturas.values())\r\n            resultado.add(alunos.get(candidatura.getNAluno()));\r\n      }\r\n\r\n      if (comPropostaAtribuida) {\r\n         for (var propostasAtribuidas : propostasAtribuidas.values()) {\r\n            resultado.add(alunos.get(propostasAtribuidas.getNAlunoAssociado()));\r\n            resultadoComPropostaAtribuida.add(alunos.get(propostasAtribuidas.getNAlunoAssociado()));\r\n         }\r\n      }\r\n\r\n      if (semPropostaAtribuida) {\r\n         HashSet<Long> alunosComProposta = new HashSet<>();\r\n\r\n         for (var propostasAtribuidas : propostasAtribuidas.values())\r\n            alunosComProposta.add(propostasAtribuidas.getNAlunoAssociado());\r\n\r\n         for (var aluno : alunos.values())\r\n            if (!alunosComProposta.contains(aluno.getNAluno()))\r\n               resultado.add(aluno);\r\n      }\r\n\r\n      ArrayList<Aluno> resultadoOrdenado = new ArrayList<>(resultado);\r\n      Collections.sort(resultadoOrdenado);\r\n\r\n      return resultadoOrdenado;\r\n   }\r\n\r\n   public ArrayList<String> consultarDocentes(String filtro){\r\n      ArrayList<String> res  = new ArrayList<>();\r\n\r\n      if(!filtro.isBlank()) {\r\n\r\n         if(docentes.get(filtro) == null)\r\n            return null;\r\n\r\n         res.add(docentes.get(filtro).getNome());\r\n         res.add(String.valueOf(calculaNumeroOrientacoesDocente(filtro)));\r\n\r\n      } else{\r\n\r\n         int max = 0, min = 0;\r\n         double media = 0;\r\n\r\n         for(var docente : docentes.values()){\r\n            int nOrientacoes = calculaNumeroOrientacoesDocente(docente.getEmail());\r\n\r\n            if(nOrientacoes < min)\r\n               min = nOrientacoes;\r\n\r\n            if(nOrientacoes > max)\r\n               max = nOrientacoes;\r\n\r\n            media += nOrientacoes;\r\n         }\r\n\r\n         media /= docentes.size();\r\n\r\n         if(media == 0.0)\r\n            return null;\r\n\r\n         res.add(String.valueOf(max));\r\n         res.add(String.valueOf(min));\r\n         res.add(String.valueOf(media));\r\n      }\r\n\r\n      return res;\r\n   }\r\n\r\n   public ArrayList<Proposta> consultarPropostas(boolean propostasAtribuidas){\r\n\r\n      HashSet<String> resultado = new HashSet<>();\r\n      StringBuilder sb = new StringBuilder();\r\n\r\n      if(propostasAtribuidas){\r\n         for(var proposta : propostas.values())\r\n            for(var propostasAtribuida : this.propostasAtribuidas.values())\r\n               if(propostasAtribuida.getId().equals(proposta.getId())) {\r\n                  resultado.add(proposta.getId());\r\n                  break;\r\n               }\r\n      }else {\r\n\r\n         HashSet<Proposta> propostasAtribuidaHS = new HashSet<>();\r\n\r\n         for(var proposta : propostas.values())\r\n            for(var propostasAtribuida : this.propostasAtribuidas.values())\r\n               if(propostasAtribuida.getId().equals(proposta.getId())) {\r\n                  propostasAtribuidaHS.add(proposta);\r\n                  break;\r\n               }\r\n\r\n         for(var proposta : propostas.values())\r\n            if(!propostasAtribuidaHS.contains(proposta))\r\n               resultado.add(proposta.getId());\r\n\r\n      }\r\n\r\n      ArrayList<String> resultadoOrdenado = new ArrayList<>(resultado);\r\n      Collections.sort(resultadoOrdenado);\r\n\r\n      ArrayList<Proposta> res = new ArrayList<>();\r\n\r\n      for(var proposta : resultadoOrdenado) {\r\n         if (propostasAtribuidas)\r\n            res.add(this.propostasAtribuidas.get(proposta));\r\n         else\r\n            res.add(propostas.get( proposta));\r\n         sb.append(System.lineSeparator());\r\n      }\r\n\r\n      return res;\r\n   }\r\n\r\n   public ArrayList<Proposta> consultarPropostas(boolean autopropostasAlunos, boolean propostasDocentes, boolean comCandidatura, boolean semCandidatura){\r\n\r\n      HashSet<Proposta> resultado = new HashSet<>();\r\n      StringBuilder sb = new StringBuilder();\r\n\r\n      if(!autopropostasAlunos && !propostasDocentes && !comCandidatura && !semCandidatura)\r\n         resultado = new HashSet<>(propostas.values());\r\n\r\n      if(autopropostasAlunos){\r\n         for(var proposta : propostas.values())\r\n            if(proposta instanceof Autoproposto)\r\n               resultado.add(proposta);\r\n      }\r\n\r\n      if(propostasDocentes){\r\n         for(var proposta : propostas.values())\r\n            if(proposta instanceof Projeto)\r\n               resultado.add(proposta);\r\n      }\r\n\r\n      if(comCandidatura){\r\n         for(var proposta : propostas.values())\r\n            for(var candidatura : candidaturas.values())\r\n               if (candidatura.getIdPropostas().contains(proposta.getId())) {\r\n                  resultado.add(proposta);\r\n                  break;\r\n               }\r\n      }\r\n\r\n      if(semCandidatura){\r\n         HashSet<String> propostasComCandidatura = new HashSet<>();\r\n\r\n         for(var proposta : propostas.values())\r\n            for(var candidatura : candidaturas.values())\r\n               if (candidatura.getIdPropostas().contains(proposta.getId())) {\r\n                  propostasComCandidatura.add(proposta.getId());\r\n                  break;\r\n               }\r\n\r\n         for (var proposta : propostas.values())\r\n            if(!propostasComCandidatura.contains(proposta.getId()))\r\n               resultado.add(proposta);\r\n      }\r\n\r\n      ArrayList<Proposta> resultadoOrdenado = new ArrayList<>(resultado);\r\n      Collections.sort(resultadoOrdenado);\r\n\r\n      return resultadoOrdenado;\r\n   }\r\n\r\n   public ArrayList<Proposta> consultarPropostasFase3(boolean autopropostasAlunos, boolean propostasDocentes, boolean propostasDisponiveis, boolean propostasAtribuidas){\r\n\r\n      HashSet<Proposta> resultado = new HashSet<>();\r\n      StringBuilder sb = new StringBuilder();\r\n\r\n      if(!autopropostasAlunos && !propostasDocentes && !propostasDisponiveis && !propostasAtribuidas)\r\n         resultado = new HashSet<>(propostas.values());\r\n\r\n      if(autopropostasAlunos){\r\n         for(var proposta : propostas.values())\r\n            if(proposta instanceof Autoproposto)\r\n               resultado.add(proposta);\r\n      }\r\n\r\n      if(propostasDocentes){\r\n         for(var proposta : propostas.values())\r\n            if(proposta instanceof Projeto)\r\n               resultado.add(proposta);\r\n      }\r\n\r\n      if(propostasDisponiveis){\r\n\r\n         HashSet<Proposta> propostasAtribuidaHS = new HashSet<>();\r\n\r\n         for(var proposta : propostas.values())\r\n            for(var propostasAtribuida : this.propostasAtribuidas.values())\r\n               if(propostasAtribuida.getId().equals(proposta.getId())) {\r\n                  propostasAtribuidaHS.add(proposta);\r\n                  break;\r\n               }\r\n\r\n         for(var proposta : propostas.values())\r\n            if(!propostasAtribuidaHS.contains(proposta))\r\n               resultado.add(proposta);\r\n\r\n      }\r\n\r\n      if(propostasAtribuidas){\r\n         for(var proposta : propostas.values())\r\n            for(var propostasAtribuida : this.propostasAtribuidas.values())\r\n               if(propostasAtribuida.getId().equals(proposta.getId())) {\r\n                  resultado.add(proposta);\r\n                  break;\r\n               }\r\n      }\r\n\r\n      ArrayList<Proposta> resultadoOrdenado = new ArrayList<>(resultado);\r\n      Collections.sort(resultadoOrdenado);\r\n\r\n      return resultadoOrdenado;\r\n   }\r\n\r\n   public ArrayList<PropostaAtribuida> consultarPropostasAtribuidasDocente(String email){\r\n\r\n      ArrayList<PropostaAtribuida> propostaAtribuidasOrientador = new ArrayList<>();\r\n\r\n      for(var propostasAtribuidas : propostasAtribuidas.values()) {\r\n\r\n         if(propostasAtribuidas.getEmailDocenteOrientador() == null)\r\n            continue;\r\n\r\n         if (propostasAtribuidas.getEmailDocenteOrientador().equalsIgnoreCase(email))\r\n            propostaAtribuidasOrientador.add(propostasAtribuidas);\r\n      }\r\n\r\n      return propostaAtribuidasOrientador;\r\n   }\r\n\r\n   public ArrayList<Aluno> getAlunosSemPropostaAtribuida(boolean soEstagio){\r\n\r\n      ArrayList<Aluno> alunosSemProposta = new ArrayList<>();\r\n\r\n      for(var aluno : alunos.values()) {\r\n\r\n         boolean insereAluno = true;\r\n\r\n         for (var proposta : propostas.values())\r\n            if (proposta.getNAlunoAssociado() == aluno.getNAluno()) {\r\n               insereAluno = false;\r\n               break;\r\n            }\r\n\r\n         for (var propostaAtribuida : propostasAtribuidas.values())\r\n            if (propostaAtribuida.getNAlunoAssociado() == aluno.getNAluno()) {\r\n               insereAluno = false;\r\n               break;\r\n            }\r\n\r\n         if (insereAluno) {\r\n\r\n            if(soEstagio && aluno.isAcessoEstagio())\r\n               alunosSemProposta.add(aluno);\r\n\r\n            else if (!soEstagio) {\r\n               alunosSemProposta.add(aluno);\r\n\r\n            }\r\n         }\r\n\r\n      }\r\n      return alunosSemProposta;\r\n   }\r\n\r\n   public ArrayList<Integer> propostas_Atribuidas_NaoAtribuidas_Total(){\r\n      ArrayList<Integer> resultado = new ArrayList<>(List.of(0,0,0));\r\n      for(var proposta : propostas.values()){\r\n         if(propostasAtribuidas.containsKey(proposta.getId()))\r\n            resultado.set(0, resultado.get(0) + 1);\r\n         else\r\n            resultado.set(1, resultado.get(1) + 1);\r\n      }\r\n      resultado.set(2, propostas.size());\r\n\r\n      return resultado;\r\n   }\r\n\r\n   public HashMap<String, Number> top5EmpresasEstagio(){\r\n      HashMap<String, Integer> top5 = new HashMap<>();\r\n\r\n      for (var proposta : propostas.values()) {\r\n         if(proposta instanceof Estagio e){\r\n            if(top5.containsKey(e.getEntidadeAcolhimento())){\r\n               top5.replace(e.getEntidadeAcolhimento(), top5.get(e.getEntidadeAcolhimento())+1);\r\n            }else{\r\n               top5.put(e.getEntidadeAcolhimento(), 1);\r\n            }\r\n         }\r\n      }\r\n      List<Map.Entry<String, Integer> > list =\r\n              new LinkedList<>(top5.entrySet());\r\n\r\n      list.sort((o1, o2) -> (o2.getValue()).compareTo(o1.getValue()));\r\n\r\n      HashMap<String, Number> top5Final = new HashMap<>();\r\n\r\n      int cont = 0;\r\n      for(var item : list){\r\n         top5Final.put(item.getKey(), item.getValue());\r\n         cont++;\r\n\r\n         if(cont == 5)\r\n            break;\r\n      }\r\n      return top5Final;\r\n   }\r\n\r\n   public HashMap<String, Number> top5DocentesOrientacoes(){\r\n      HashMap<String, Integer> top5 = new HashMap<>();\r\n\r\n      for (var proposta : propostasAtribuidas.values()) {\r\n         if(proposta.getEmailDocenteOrientador() != null){\r\n            if(top5.containsKey(proposta.getEmailDocenteOrientador()))\r\n               top5.replace(proposta.getEmailDocenteOrientador(), top5.get(proposta.getEmailDocenteOrientador())+1);\r\n            else\r\n               top5.put(proposta.getEmailDocenteOrientador(), 1);\r\n         }\r\n      }\r\n      List<Map.Entry<String, Integer> > list =\r\n              new LinkedList<>(top5.entrySet());\r\n\r\n      list.sort((o1, o2) -> (o2.getValue()).compareTo(o1.getValue()));\r\n\r\n      HashMap<String, Number> top5Final = new HashMap<>();\r\n\r\n      int cont = 0;\r\n      for(var item : list){\r\n         top5Final.put(docentes.get(item.getKey()).getNome(), item.getValue());\r\n         cont++;\r\n\r\n         if(cont == 5)\r\n            break;\r\n      }\r\n      return top5Final;\r\n   }\r\n\r\n   public int getNumPropotasAtribuidasComOrientador(){\r\n      int cont = 0;\r\n\r\n      for(var propostaAtribuida : propostasAtribuidas.values())\r\n         if (propostaAtribuida.getEmailDocenteOrientador() != null)\r\n            cont++;\r\n\r\n      return cont;\r\n   }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoE.java b/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoE.java
--- a/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoE.java	(revision 7ab6e6c76968c5d0d677035dada17e6b6986f71c)
+++ b/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoE.java	(date 1655396468829)
@@ -9,18 +9,48 @@
 import java.io.*;
 import java.util.*;
 
+/**
+ * Classe ApoioPoE que guarda as informações dos alunos, docentes e propostas e a lógica do programa
+ * @author Maria Abreu e Pedro Morais
+ * @version 1.0.0
+ */
 public class ApoioPoE implements Serializable, Cloneable {
 
+   /**
+    * Versão do Serial da classe
+    */
    @Serial
    private static final long serialVersionUID = 1L;
+
+   /**
+    * Indica a fase bloqueada
+    */
    private int faseBloqueada;
 
+   /**
+    * Lista de alunos, em que a chave é o número de aluno
+    */
    private final HashMap<Long, Aluno> alunos;
+   /**
+    * Lista de docentes, em que a chave é o email do docente
+    */
    private final HashMap<String, Docente> docentes;
+   /**
+    * Lista de propostas, em que a chave é o id da proposta
+    */
    private final HashMap<String, Proposta> propostas;
+   /**
+    * Lista de candidaturas, em que a chave é o número de aluno associado à candidatura
+    */
    private final HashMap<Long, Candidatura> candidaturas;
+   /**
+    * Lista de propostas atribuídas, em que a chave é o id da proposta
+    */
    private final HashMap<String, PropostaAtribuida> propostasAtribuidas;
 
+   /**
+    * Construtor público
+    */
    public ApoioPoE() {
       alunos = new HashMap<>();
       docentes = new HashMap<>();
@@ -31,14 +61,35 @@
       faseBloqueada = 0;
    }
 
+   /**
+    * Obter o número correspondente à fase bloqueada
+    * @return faseBloqueada - número correspondente à fase bloqueada
+    */
    public int getFaseBloqueada() {
       return faseBloqueada;
    }
 
+   /**
+    * Alterar o número correspondente à fase bloqueada
+    * @param faseBloqueada nova faseBloqueada
+    */
    public void setFaseBloqueada(int faseBloqueada) {
       this.faseBloqueada = faseBloqueada;
    }
 
+
+   /**
+    * Adicionar alunos, realizando as verificações necessárias
+    * @param nAluno - número de aluno
+    * @param nome - nome do aluno
+    * @param email - email do aluno
+    * @param siglaCurso - sigla correspondente ao curso do aluno
+    * @param siglaRamo - sigla correspondente ao ramo do aluno
+    * @param classificacao - classificação do aluno
+    * @param acessoEstagio - o aluno tem acesso a estágio? sim ou não
+    * @return se o aluno foi adicionado ou não
+    */
+
    public boolean adicionaAluno(long nAluno, String nome, String email, String siglaCurso, String siglaRamo,
                                 double classificacao, boolean acessoEstagio) {
 
@@ -78,6 +129,12 @@
       return true;
    }
 
+   /**
+    * Adicionar docentes, fazendo as verificações necessárias
+    * @param nome - nome do docente
+    * @param email - email do docente
+    * @return se o docente foi adicionado ou não
+    */
    public boolean adicionaDocente(String nome, String email) {
 
       if (docentes.containsKey(email)) {
@@ -96,6 +153,16 @@
       return true;
    }
 
+   /**
+    * Adicionar propostas com aluno associado, fazendo as verificações necessárias
+    * @param tipo - tipo de proposta
+    * @param id - id da proposta
+    * @param titulo - titulo da proposta
+    * @param nAlunoAssociado - número do aluno associado à proposta
+    * @param areasDestino - área correspondente à proposta
+    * @param entidadeOuDocente - entidade ou docente associados à proposta
+    * @return se a proposta foi adicionada ou não
+    */
    public boolean adicionaProposta(String tipo, String id, String titulo, long nAlunoAssociado,
                                    String areasDestino, String entidadeOuDocente) {
 
@@ -140,6 +207,15 @@
       return true;
    }
 
+   /**
+    * Adicionar propostas sem associar aluno, fazendo as verificações necessárias
+    * @param tipo - tipo de proposta
+    * @param id - id da proposta
+    * @param titulo - título da proposta
+    * @param areasDestino - área correspondente à proposta
+    * @param entidadeOuDocente - entidade ou docente associados à proposta
+    * @return se a proposta foi adicionada ou não
+    */
    public boolean adicionaProposta(String tipo, String id, String titulo,
                                    String areasDestino, String entidadeOuDocente) {
 
@@ -174,6 +250,14 @@
       return true;
    }
 
+   /**
+    * Adicionar proposta do tipo autoproposta, realizando as verificações necessárias
+    * @param tipo - tipo da proposta
+    * @param id - id da proposta
+    * @param titulo - título da proposta
+    * @param nAlunoAssociado - número do aluno associado à proposta
+    * @return se a proposta foi adicionada ou não
+    */
    public boolean adicionaProposta(String tipo, String id, String titulo, long nAlunoAssociado) {
 
       if (propostas.containsKey(id)) {
@@ -200,6 +284,12 @@
       return true;
    }
 
+   /**
+    * Adicionar candidaturas, realizando as verificações necessárias
+    * @param nAluno - número de aluno
+    * @param propostas - lista de propostas
+    * @return se a candidatura foi adicionada ou não
+    */
    public boolean adicionaCandidatura(long nAluno, ArrayList<String> propostas) {
 
       if (propostas.isEmpty()) {
@@ -267,6 +357,12 @@
       return true;
    }
 
+   /**
+    * Atribuir propostas aos alunos, realizando as verificações necessárias
+    * @param idProposta - id da proposta
+    * @param nAluno - número de aluno
+    * @return se a proposta foi atribuída ou não
+    */
    public boolean atribuirPropostaAluno(String idProposta, long nAluno) {
 
       int ordemPreferencia = 1;
@@ -328,6 +424,10 @@
       return true;
    }
 
+   /**
+    * Atrbuição automática de propostas, que já têm aluno associado
+    * @return se existem propostas para atribuir automaticamente
+    */
    public boolean atribuicaoAutomaticaPropostasComAluno() {
 
       HashSet<Proposta> propostasAtribuir = new HashSet<>();
@@ -346,6 +446,12 @@
       return true;
    }
 
+   /**
+    * Atribuir propostas aos docentes orientadores
+    * @param idProposta - id da proposta
+    * @param email - email do docente
+    * @return se a proposta foi atribuída ou não
+    */
    public boolean atribuirPropostaDocenteOrientador(String idProposta, String email) {
 
       if (!propostasAtribuidas.containsKey(idProposta) && propostas.containsKey(idProposta)) {
@@ -368,6 +474,10 @@
       return true;
    }
 
+   /**
+    * Atribuição automática de docentes às propostas atribuídas
+    * @return se algum docente foi atribuído
+    */
    public boolean associacaoAutomaticaDocentesProponentes() {
 
       boolean associadoAlgum = false;
@@ -383,31 +493,60 @@
       return associadoAlgum;
    }
 
+   /**
+    * Obter clone de um aluno
+    * @param nAluno - número do aluno a procurar
+    * @return clone do aluno pretendido, ou null caso este não exitsa
+    */
    public Aluno getAluno(long nAluno) {
       Aluno aux = alunos.get(nAluno);
       return aux != null ? aux.clone() : null;
    }
 
+   /**
+    * Obter clone de um docente
+    * @param email - email do docente a procurar
+    * @return clone do docente pretendido ou null caso este não exista
+    */
    public Docente getDocente(String email) {
       Docente aux = docentes.get(email);
       return aux != null ? aux.clone() : null;
    }
 
+   /**
+    * Obter clone de uma proposta
+    * @param id - id da proposta a procurar
+    * @return clone da proposta pretendida ou null caso esta não exista
+    */
    public Proposta getProposta(String id) {
       Proposta aux = propostas.get(id);
       return aux != null ? aux.clone() : null;
    }
 
+   /**
+    * Obter clone de uma candidatura
+    * @param nAluno - número do aluno a procurar
+    * @return clone da candidatura pretendida ou null caso esta não exista
+    */
    public Candidatura getCandidatura(long nAluno) {
       Candidatura aux = candidaturas.get(nAluno);
       return aux != null ? aux.clone() : null;
    }
 
+   /**
+    * Obter clone de uma proposta atribuída
+    * @param id - id da proposta atribuída a procurar
+    * @return clone da proposta atribuída pretendida ou null caso esta não exista
+    */
    public PropostaAtribuida getPropostaAtribuida(String id) {
       PropostaAtribuida aux = propostasAtribuidas.get(id);
       return aux != null ? aux.clone() : null;
    }
 
+   /**
+    * Obter todos os alunos
+    * @return clone com a lista de alunos ordenada
+    */
    public ArrayList<Aluno> getAlunos() {
       ArrayList<Aluno> alunosOrdenados = new ArrayList<>(alunos.values());
 
@@ -415,6 +554,10 @@
       return (ArrayList<Aluno>) alunosOrdenados.clone();
    }
 
+   /**
+    * Obter todos os docentes
+    * @return clone com a lista de docentes ordenada
+    */
    public ArrayList<Docente> getDocentes() {
       ArrayList<Docente> docentesOrdenados = new ArrayList<>(docentes.values());
 
@@ -422,24 +565,41 @@
       return (ArrayList<Docente>) docentesOrdenados.clone();
    }
 
+   /**
+    * Obter todas as propostas
+    * @return clone com a lista de propostas ordenada
+    */
    public ArrayList<Proposta> getPropostas() {
       ArrayList<Proposta> propostasOrdenadas = new ArrayList<>(propostas.values());
       Collections.sort(propostasOrdenadas);
       return (ArrayList<Proposta>) propostasOrdenadas.clone();
    }
 
+   /**
+    * Obter todas as candidaturas
+    * @return clone com a lista de candidaturas ordenada
+    */
    public ArrayList<Candidatura> getCandidaturas() {
       ArrayList<Candidatura> candidaturasOrdenadas = new ArrayList<>(candidaturas.values());
       Collections.sort(candidaturasOrdenadas);
       return (ArrayList<Candidatura>) candidaturasOrdenadas.clone();
    }
 
+   /**
+    * Obter todas as propostas atribuídas
+    * @return clone com a lista de propostas atribuídas ordenada
+    */
    public ArrayList<PropostaAtribuida> getPropostasAtribuidas() {
       ArrayList<PropostaAtribuida> propostaAtribuidaOrdenadas = new ArrayList<>(propostasAtribuidas.values());
       Collections.sort(propostaAtribuidaOrdenadas);
       return (ArrayList<PropostaAtribuida>) propostaAtribuidaOrdenadas.clone();
    }
 
+   /**
+    * Remover um aluno, através do número de aluno
+    * @param nAluno - número de aluno
+    * @return se o aluno foi removido ou não
+    */
    public boolean removeAluno(long nAluno) {
 
       if(!alunos.containsKey(nAluno)) {
@@ -468,6 +628,11 @@
       return alunos.remove(nAluno) != null;
    }
 
+   /**
+    * Remover um docente, através do email
+    * @param email - email do docente
+    * @return se o docente foi removido ou não
+    */
    public boolean removeDocente(String email) {
 
       if(!docentes.containsKey(email)) {
@@ -492,6 +657,11 @@
       return docentes.remove(email) != null;
    }
 
+   /**
+    * Remover uma proposta
+    * @param id - id da proposta
+    * @return se a proposta foi removida ou não
+    */
    public boolean removeProposta(String id) {
 
       if(!propostas.containsKey(id)) {
@@ -512,6 +682,11 @@
       return propostas.remove(id) != null;
    }
 
+   /**
+    * Remover candidatura de um aluno, através do respetivo número de aluno
+    * @param nAluno - número de aluno
+    * @return se a candidatura foi removida ou não
+    */
    public boolean removeCandidatura(long nAluno) {
 
       if(!candidaturas.containsKey(nAluno)) {
@@ -529,6 +704,11 @@
       return candidaturas.remove(nAluno) != null;
    }
 
+   /**
+    * Remover propostas atribuídas
+    * @param id - id da proposta
+    * @return se a proposta atribuída foi removida ou não
+    */
    public boolean removePropostaAtribuida(String id) {
 
       if(!propostas.containsKey(id)) {
@@ -539,6 +719,11 @@
       return propostasAtribuidas.remove(id) != null;
    }
 
+   /**
+    * Remover docente orientador atribuído a uma proposta
+    * @param id - id da proposta atribuída
+    * @return se o docente orientador foi removido ou não
+    */
    public boolean removeOrientadorPropostaAtribuida(String id) {
 
       if (!propostas.containsKey(id)) {
@@ -556,10 +741,20 @@
       return propostasAtribuidas.get(id).getEmailDocenteOrientador() == null;
    }
 
-   public boolean propostasSufecienteParaRamo(String ramo) {
+   /**
+    * Verifica se existem propostas suficientes para os alunos de um determinado ramo
+    * @param ramo - ramo a verificar
+    * @return se existem propostas suficentes
+    */
+   public boolean propostasSuficienteParaRamo(String ramo) {
       return propostasPorRamo(ramo) >= nAlunosPorRamo(ramo);
    }
 
+   /**
+    * Obter número de propostas para um determinado ramo
+    * @param ramo - ramo a verificar
+    * @return número de propostas para um determinado ramo
+    */
    public int propostasPorRamo(String ramo){
       int contadorPropostaRamo = 0;
 
@@ -579,6 +774,11 @@
       return contadorPropostaRamo;
    }
 
+   /**
+    * Obter o número de alunos por ramo
+    * @param ramo - ramo a verificar
+    * @return número de alunos por ramo
+    */
    public int nAlunosPorRamo(String ramo){
       int contadorAlunosRamo = 0;
 
@@ -589,6 +789,10 @@
       return contadorAlunosRamo;
    }
 
+   /**
+    * Verifica se todas as candidaturas têm proposta atribuída
+    * @return se toas as candidaturas têm proposta atribuída
+    */
    public boolean todasCandidaturasComPropostaAtribuida() {
 
       ArrayList<Long> alunosComPropostaAtribuida = new ArrayList<>();
@@ -599,6 +803,11 @@
       return alunosComPropostaAtribuida.containsAll(candidaturas.keySet());
    }
 
+   /**
+    * Calcula o número de orientações para um determinado docente
+    * @param email - email do docente
+    * @return número de orientações para um determinado docente
+    */
    public int calculaNumeroOrientacoesDocente(String email) {
       int contador = 0;
 
@@ -610,6 +819,10 @@
       return contador;
    }
 
+   /**
+    * Construtor por cópia privado
+    * @param apoioPoE - objeto a ser copiado
+    */
    private ApoioPoE(ApoioPoE apoioPoE) {
 
       this.faseBloqueada = apoioPoE.faseBloqueada;
@@ -637,11 +850,20 @@
          this.propostasAtribuidas.put(key, apoioPoE.propostasAtribuidas.get(key).clone());
    }
 
+   /**
+    * Clone do objeto ApoioPoE
+    * @return clone
+    */
    @Override
    protected ApoioPoE clone() {
       return new ApoioPoE(this);
    }
 
+   /**
+    * Obter o tipo de proposta de uma determinada proposta
+    * @param id - id da proposta
+    * @return tipo de proposta de uma determinada proposta
+    */
    public String getTipoProposta(String id) {
 
       if (getProposta(id) == null)
@@ -650,6 +872,16 @@
       return getProposta(id).tipoProposta();
    }
 
+   /**
+    * Editar aluno
+    * @param nAluno - número de aluno a editar
+    * @param nome - novo nome do aluno
+    * @param siglaCurso - nova sigla do curso do aluno
+    * @param siglaRamo - nova sigla do ramo do aluno
+    * @param classificacao - nova classificação do aluno
+    * @param acessoEstagio - o aluno tem acesso a estágio? sim ou não
+    * @return se o aluno foi editado ou não
+    */
    public boolean editaAluno(long nAluno, String nome, String siglaCurso, String siglaRamo,
                              String classificacao, String acessoEstagio) {
 
@@ -702,6 +934,12 @@
 
    }
 
+   /**
+    * Editar docentes
+    * @param email - email do docente a editar
+    * @param nome - novo nome do docente
+    * @return se o docente foi editado ou não
+    */
    public boolean editaDocente(String email, String nome) {
 
       if (!docentes.containsKey(email)) {
@@ -717,6 +955,15 @@
       return true;
    }
 
+   /**
+    * Editar propostas
+    * @param id - id da proposta a editar
+    * @param titulo - novo título da proposta
+    * @param ramos - novo ramo da proposta
+    * @param entidade_docente - novos entidade ou docente associados à proposta
+    * @param nAluno - novo número de aluno
+    * @return se a proposta foi editada ou não
+    */
    public boolean editaProposta(String id, String titulo, String ramos, String entidade_docente, String nAluno) {
 
       if (!propostas.containsKey(id)) {
@@ -771,6 +1018,13 @@
       return true;
    }
 
+   /**
+    * Editar autopropostas
+    * @param id - id da proposta a editar
+    * @param titulo - novo título da proposta
+    * @param nAluno - novo número de aluno da proposta
+    * @return se a autoproposta foi editada ou não
+    */
    public boolean editaProposta(String id, String titulo, String nAluno) {
 
       if (!propostas.containsKey(id)) {
@@ -802,6 +1056,12 @@
       return true;
    }
 
+   /**
+    * Editar candidaturas
+    * @param nAluno - número do aluno associado à candidatura, que vai ser editada
+    * @param propostas - lista de propostas a editar
+    * @return se a candidatura foi editada
+    */
    public boolean editaCandidatura(long nAluno, ArrayList<String> propostas) {
 
       if (propostas.isEmpty()) {
@@ -842,6 +1102,11 @@
       return true;
    }
 
+   /**
+    * Consultar alunos, segundo os filtros da fase 5
+    * @param comPropostaAtribuida - lista de alunos que têm proposta atribuída e que não têm proposta atribuída
+    * @return lista de alunos, segundo os filtors da fase 5
+    */
    public ArrayList<Aluno> consultarAlunosFase5(boolean comPropostaAtribuida){
 
       HashSet<Aluno> resultado = new HashSet<>();
@@ -868,6 +1133,11 @@
       return resultadoOrdenado;
    }
 
+   /**
+    * Consultar alunos com orientadores associados
+    * @param comOrientadorAssociado - lista de alunos com arientadores e sem orientadores
+    * @return lista de alunos com orientadores associados
+    */
    public ArrayList<Aluno> consultarAlunos(boolean comOrientadorAssociado) {
 
       HashSet<Aluno> resultado = new HashSet<>();
@@ -887,6 +1157,13 @@
       return resultadoOrdenado;
    }
 
+   /**
+    * Consultar alunos segundo os filtros recebidos
+    * @param autoproposta - lista de alunos com autoproposta atribuída e sem autoproposta atribuída
+    * @param comCandidatura - lista de alunos com candidatura atribuída
+    * @param semCandidatura - lista de alunos sem candidatura atribuída
+    * @return lista de alunos segundo os filtros recebidos
+    */
    public ArrayList<Aluno> consultarAlunos(boolean autoproposta, boolean comCandidatura, boolean semCandidatura) {
       HashSet<Aluno> resultado = new HashSet<>();
 
@@ -921,6 +1198,14 @@
       return resultadoOrdenado;
    }
 
+   /**
+    * Consultar alunos segundo filtros recebidos
+    * @param autoproposta - lista de alunos com autoprosta
+    * @param comCandidatura - lista de alunos com candidatura
+    * @param comPropostaAtribuida - lista de alunos com proposta atribuída
+    * @param semPropostaAtribuida - lista de alunos sem proposta atribuída
+    * @return lista de alunos, segundo filtros recebidos
+    */
    public ArrayList<Aluno> consultarAlunos(boolean autoproposta, boolean comCandidatura, boolean comPropostaAtribuida, boolean semPropostaAtribuida) {
 
       HashSet<Aluno> resultado = new HashSet<>();
@@ -964,6 +1249,11 @@
       return resultadoOrdenado;
    }
 
+   /**
+    * Consultar número de orientações dos docentes
+    * @param filtro - email do docente
+    * @return lista de orientações dos docentes
+    */
    public ArrayList<String> consultarDocentes(String filtro){
       ArrayList<String> res  = new ArrayList<>();
 
@@ -1005,6 +1295,11 @@
       return res;
    }
 
+   /**
+    * Consultar propostas
+    * @param propostasAtribuidas - boolean propostas atribuídas ou não atribuídas
+    * @return lista de propostas
+    */
    public ArrayList<Proposta> consultarPropostas(boolean propostasAtribuidas){
 
       HashSet<String> resultado = new HashSet<>();
@@ -1050,6 +1345,14 @@
       return res;
    }
 
+   /**
+    * Consultar propostas, segundo os filtros recebidos
+    * @param autopropostasAlunos - autopropostas de alunos
+    * @param propostasDocentes - propostas de docentes
+    * @param comCandidatura - propostas com candidatura
+    * @param semCandidatura - propostas sem candidatura
+    * @return lista de propostas
+    */
    public ArrayList<Proposta> consultarPropostas(boolean autopropostasAlunos, boolean propostasDocentes, boolean comCandidatura, boolean semCandidatura){
 
       HashSet<Proposta> resultado = new HashSet<>();
@@ -1100,6 +1403,14 @@
       return resultadoOrdenado;
    }
 
+   /**
+    * Consultar propostas segundo os filtros da fase 3
+    * @param autopropostasAlunos - autopropostas de alunos
+    * @param propostasDocentes - propostas de docentes
+    * @param propostasDisponiveis - propostas que ainda não foram atribuídas
+    * @param propostasAtribuidas - propostas atribuídas
+    * @return lista de propostas, segundo os filtros
+    */
    public ArrayList<Proposta> consultarPropostasFase3(boolean autopropostasAlunos, boolean propostasDocentes, boolean propostasDisponiveis, boolean propostasAtribuidas){
 
       HashSet<Proposta> resultado = new HashSet<>();
@@ -1152,6 +1463,11 @@
       return resultadoOrdenado;
    }
 
+   /**
+    * Consultar propostas atribuídas a um docente
+    * @param email - email do docente
+    * @return lista de propostas
+    */
    public ArrayList<PropostaAtribuida> consultarPropostasAtribuidasDocente(String email){
 
       ArrayList<PropostaAtribuida> propostaAtribuidasOrientador = new ArrayList<>();
@@ -1168,6 +1484,11 @@
       return propostaAtribuidasOrientador;
    }
 
+   /**
+    * Obter alunos sem propostas atribuída
+    * @param soEstagio - só alunos com acesso a estágio ou todos os alunos
+    * @return lista de alunos sem propostas atribuídas
+    */
    public ArrayList<Aluno> getAlunosSemPropostaAtribuida(boolean soEstagio){
 
       ArrayList<Aluno> alunosSemProposta = new ArrayList<>();
@@ -1203,6 +1524,10 @@
       return alunosSemProposta;
    }
 
+   /**
+    * Resumo de propostas atribuídas
+    * @return um array com o número de propostas atribuídas, não atribuídas e total de propostas
+    */
    public ArrayList<Integer> propostas_Atribuidas_NaoAtribuidas_Total(){
       ArrayList<Integer> resultado = new ArrayList<>(List.of(0,0,0));
       for(var proposta : propostas.values()){
@@ -1216,6 +1541,10 @@
       return resultado;
    }
 
+   /**
+    * 5 Empresas com mais estágios
+    * @return lista nome e número de estágios das 5 empresas com mais estágios
+    */
    public HashMap<String, Number> top5EmpresasEstagio(){
       HashMap<String, Integer> top5 = new HashMap<>();
 
@@ -1246,6 +1575,10 @@
       return top5Final;
    }
 
+   /**
+    * 5 docentes com mais orientações
+    * @return lista de docentes e número de orientações dos 5 docentes com mais orientações
+    */
    public HashMap<String, Number> top5DocentesOrientacoes(){
       HashMap<String, Integer> top5 = new HashMap<>();
 
@@ -1275,6 +1608,10 @@
       return top5Final;
    }
 
+   /**
+    * Obter número de propostas atribuídas com docente orientador
+    * @return número de propostas atribuídas com docente orientador
+    */
    public int getNumPropotasAtribuidasComOrientador(){
       int cont = 0;
 
Index: TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoEManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.isec.pa.apoio_poe.model.data;\r\n\r\nimport pt.isec.pa.apoio_poe.model.data.pessoas.alunos.Aluno;\r\nimport pt.isec.pa.apoio_poe.model.data.pessoas.Docente;\r\nimport pt.isec.pa.apoio_poe.model.data.propostas.*;\r\nimport pt.isec.pa.apoio_poe.model.errorHandling.ErrorOccurred;\r\nimport pt.isec.pa.apoio_poe.model.errorHandling.ErrorType;\r\nimport pt.isec.pa.apoio_poe.model.memento.IMemento;\r\nimport pt.isec.pa.apoio_poe.model.memento.IOriginator;\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\npublic class ApoioPoEManager implements Serializable, IOriginator {\r\n\r\n    @Serial\r\n    private static final long serialVersionUID = 1L;\r\n    private ApoioPoE apoioPOE;\r\n\r\n    public ApoioPoEManager(ApoioPoE apoioPOE) {\r\n        this.apoioPOE = apoioPOE;\r\n    }\r\n    public int getFaseBloqueada() {\r\n        return apoioPOE.getFaseBloqueada();\r\n    }\r\n\r\n    public void setFaseBloqueada(int faseBloqueada) {\r\n        apoioPOE.setFaseBloqueada(faseBloqueada);\r\n    }\r\n\r\n    public boolean adicionaAluno(long nAluno, String nome, String email, String siglaCurso, String siglaRamo,\r\n                                 double classificacao, boolean acessoEstagio) {\r\n        return apoioPOE.adicionaAluno(nAluno, nome, email, siglaCurso, siglaRamo, classificacao, acessoEstagio);\r\n    }\r\n\r\n    public boolean adicionaDocente(String nome, String email) {\r\n        return apoioPOE.adicionaDocente(nome, email);\r\n    }\r\n\r\n    public boolean adicionaProposta(String tipo, String id, String titulo, long nAlunoAssociado,\r\n                                    String areasDestino, String entidadeOuDocente) {\r\n        return apoioPOE.adicionaProposta(tipo, id, titulo, nAlunoAssociado, areasDestino, entidadeOuDocente);\r\n    }\r\n\r\n    public boolean adicionaProposta(String tipo, String id, String titulo, String areasDestino, String entidadeOuDocente) {\r\n        return apoioPOE.adicionaProposta(tipo, id, titulo, areasDestino, entidadeOuDocente);\r\n    }\r\n\r\n    public boolean adicionaProposta(String tipo, String id, String titulo, long nAlunoAssociado) {\r\n        return apoioPOE.adicionaProposta(tipo, id, titulo, nAlunoAssociado);\r\n    }\r\n\r\n    public boolean adicionaCandidatura(long nAluno, ArrayList<String> propostas) {\r\n        return apoioPOE.adicionaCandidatura(nAluno, propostas);\r\n    }\r\n\r\n    public boolean atribuirPropostaAluno(String idProposta, long nAluno) {\r\n        return apoioPOE.atribuirPropostaAluno(idProposta, nAluno);\r\n    }\r\n    public boolean atribuicaoAutomaticaPropostasComAluno() {\r\n        return apoioPOE.atribuicaoAutomaticaPropostasComAluno();\r\n    }\r\n\r\n    public boolean atribuirPropostaDocenteOrientador(String idProposta, String email) {\r\n        return apoioPOE.atribuirPropostaDocenteOrientador(idProposta, email);\r\n    }\r\n    public boolean associacaoAutomaticaDocentesProponentes() {\r\n        return apoioPOE.associacaoAutomaticaDocentesProponentes();\r\n    }\r\n\r\n    public Aluno getAluno(long nAluno) {\r\n        return apoioPOE.getAluno(nAluno);\r\n    }\r\n    public Docente getDocente(String email) {\r\n        return apoioPOE.getDocente(email);\r\n    }\r\n    public Proposta getProposta(String id) {\r\n        return apoioPOE.getProposta(id);\r\n    }\r\n    public Candidatura getCandidatura(long nAluno) {\r\n        return apoioPOE.getCandidatura(nAluno);\r\n    }\r\n    public PropostaAtribuida getPropostaAtribuida(String id) {\r\n        return apoioPOE.getPropostaAtribuida(id);\r\n    }\r\n\r\n    public ArrayList<Aluno> getAlunos() {\r\n        return apoioPOE.getAlunos();\r\n    }\r\n    public ArrayList<Docente> getDocentes() {\r\n        return apoioPOE.getDocentes();\r\n    }\r\n    public ArrayList<Proposta> getPropostas() {\r\n        return apoioPOE.getPropostas();\r\n    }\r\n    public ArrayList<Candidatura> getCandidaturas() {\r\n        return apoioPOE.getCandidaturas();\r\n    }\r\n    public ArrayList<PropostaAtribuida> getPropostasAtribuidas() {\r\n        return apoioPOE.getPropostasAtribuidas();\r\n    }\r\n\r\n    public boolean removeAluno(long nAluno) {\r\n        return apoioPOE.removeAluno(nAluno);\r\n    }\r\n\r\n    public boolean removeDocente(String email) {\r\n        return apoioPOE.removeDocente(email);\r\n    }\r\n\r\n    public boolean removeProposta(String id) {\r\n        return apoioPOE.removeProposta(id);\r\n    }\r\n\r\n    public boolean removeCandidatura(long id) {\r\n        return apoioPOE.removeCandidatura(id);\r\n    }\r\n\r\n    public boolean removePropostaAtribuida(String id) {\r\n        return apoioPOE.removePropostaAtribuida(id);\r\n    }\r\n\r\n    public boolean removeOrientadorPropostaAtribuida(String id) {\r\n        return apoioPOE.removeOrientadorPropostaAtribuida(id);\r\n    }\r\n\r\n    public boolean propostasSufecienteParaRamo(String ramo) {\r\n        return apoioPOE.propostasSufecienteParaRamo(ramo);\r\n    }\r\n\r\n    public boolean todasCandidaturasComPropostaAtribuida() {\r\n        return apoioPOE.todasCandidaturasComPropostaAtribuida();\r\n    }\r\n\r\n    public int calculaNumeroOrientacoesDocente(String email) {\r\n        return apoioPOE.calculaNumeroOrientacoesDocente(email);\r\n    }\r\n\r\n    public String getTipoProposta(String id) {\r\n        return apoioPOE.getTipoProposta(id);\r\n    }\r\n\r\n    public boolean editaAluno(long nAluno, String nome, String siglaCurso, String siglaRamo,\r\n                              String classificacao, String acessoEstagio) {\r\n        return apoioPOE.editaAluno(nAluno, nome, siglaCurso, siglaRamo, classificacao, acessoEstagio);\r\n    }\r\n\r\n    public boolean editaDocente(String email, String nome) {\r\n        return apoioPOE.editaDocente(email, nome);\r\n    }\r\n\r\n    public boolean editaProposta(String id, String titulo, String ramos, String entidade_docente, String nAluno) {\r\n        return apoioPOE.editaProposta(id, titulo, ramos, entidade_docente, nAluno);\r\n    }\r\n\r\n    public boolean editaProposta(String id, String titulo, String nAluno) {\r\n        return apoioPOE.editaProposta(id, titulo, nAluno);\r\n    }\r\n\r\n    public boolean editaCandidatura(long nAluno, ArrayList<String> propostas) {\r\n        return apoioPOE.editaCandidatura(nAluno, propostas);\r\n    }\r\n\r\n    public ArrayList<Aluno> consultarAlunosFase5(boolean comPropostaAtribuida) {\r\n        return apoioPOE.consultarAlunosFase5(comPropostaAtribuida);\r\n    }\r\n\r\n    public ArrayList<Aluno> consultarAlunos(boolean comOrientadorAssociado) {\r\n        return apoioPOE.consultarAlunos(comOrientadorAssociado);\r\n    }\r\n\r\n    public ArrayList<Aluno> consultarAlunos(boolean autoproposta, boolean comCandidatura, boolean semCandidatura) {\r\n        return apoioPOE.consultarAlunos(autoproposta, comCandidatura, semCandidatura);\r\n    }\r\n\r\n    public ArrayList<Aluno> consultarAlunos(boolean autoproposta, boolean comCandidatura, boolean comPropostaAtribuida, boolean semPropostaAtribuida) {\r\n        return apoioPOE.consultarAlunos(autoproposta, comCandidatura, comPropostaAtribuida, semPropostaAtribuida);\r\n    }\r\n\r\n    public ArrayList<String> consultarDocentes(String filtro) {\r\n        return apoioPOE.consultarDocentes(filtro);\r\n    }\r\n\r\n    public ArrayList<Proposta> consultarPropostas(boolean propostasAtribuidas) {\r\n        return apoioPOE.consultarPropostas(propostasAtribuidas);\r\n    }\r\n\r\n    public ArrayList<Proposta> consultarPropostas(boolean autopropostasAlunos, boolean propostasDocentes, boolean comCandidatura, boolean semCandidatura) {\r\n        return apoioPOE.consultarPropostas(autopropostasAlunos, propostasDocentes, comCandidatura, semCandidatura);\r\n    }\r\n\r\n    public ArrayList<Proposta> consultarPropostasFase3(boolean autopropostasAlunos, boolean propostasDocentes, boolean propostasDisponiveis, boolean propostasAtribuidas) {\r\n        return apoioPOE.consultarPropostasFase3(autopropostasAlunos, propostasDocentes, propostasDisponiveis, propostasAtribuidas);\r\n    }\r\n\r\n    public ArrayList<PropostaAtribuida> consultarPropostasAtribuidasDocente(String email) {\r\n        return apoioPOE.consultarPropostasAtribuidasDocente(email);\r\n    }\r\n\r\n    public ArrayList<Aluno> getAlunosSemPropostaAtribuida(boolean soEstagio) {\r\n        return apoioPOE.getAlunosSemPropostaAtribuida(soEstagio);\r\n    }\r\n\r\n    public int nAlunosPorRamo(String ramo) {\r\n        return apoioPOE.nAlunosPorRamo(ramo);\r\n    }\r\n\r\n    public int propostasPorRamo(String ramo) {\r\n        return apoioPOE.propostasPorRamo(ramo);\r\n    }\r\n\r\n    public ArrayList<Integer> propostasAtribuidas_NaoAtribuidas_Total() {\r\n        return apoioPOE.propostas_Atribuidas_NaoAtribuidas_Total();\r\n    }\r\n\r\n    public HashMap<String, Number> top5EmpresasEstagio() {\r\n        return apoioPOE.top5EmpresasEstagio();\r\n    }\r\n\r\n    public HashMap<String, Number> top5DocentesOrientacoes() {\r\n        return apoioPOE.top5DocentesOrientacoes();\r\n    }\r\n\r\n    public int getNumPropotasAtribuidasComOrientador() {\r\n        return apoioPOE.getNumPropotasAtribuidasComOrientador();\r\n    }\r\n\r\n    public boolean adicionaAlunosDeFicheiro(String nomeFicheiro){\r\n\r\n        try (FileReader fr = new FileReader(nomeFicheiro);\r\n             BufferedReader br = new BufferedReader(fr)) {\r\n\r\n            String line;\r\n            while ((line = br.readLine()) != null){\r\n                String[] tokens=line.split(\",\");\r\n\r\n                if(!Boolean.parseBoolean(tokens[6]) && !tokens[6].equalsIgnoreCase(\"false\"))\r\n                    continue;\r\n\r\n                adicionaAluno(Long.parseLong(tokens[0]), tokens[1], tokens[2], tokens[3],\r\n                        tokens[4], Double.parseDouble(tokens[5]), Boolean.parseBoolean(tokens[6]));\r\n\r\n            }\r\n\r\n        } catch (FileNotFoundException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.FILE_NOT_FOUND);\r\n        } catch (IOException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.IO_EXCEPTION);\r\n        }\r\n\r\n        if(ErrorOccurred.getInstance().getLastError() != ErrorType.NONE)\r\n            ErrorOccurred.getInstance().setError(ErrorType.PROBLEMS_READING_ALUNOS_FILE);\r\n\r\n        return true;\r\n    }\r\n\r\n    public boolean adicionaDocentesDeFicheiro(String nomeFicheiro){\r\n\r\n        try (FileReader fr = new FileReader(nomeFicheiro);\r\n             BufferedReader br = new BufferedReader(fr)) {\r\n\r\n            String line;\r\n            while ((line = br.readLine()) != null){\r\n                String[] tokens=line.split(\",\");\r\n\r\n                adicionaDocente(tokens[0], tokens[1]);\r\n            }\r\n\r\n        } catch (FileNotFoundException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.FILE_NOT_FOUND);\r\n        } catch (IOException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.IO_EXCEPTION);\r\n        }\r\n\r\n        if(ErrorOccurred.getInstance().getLastError() != ErrorType.NONE)\r\n            ErrorOccurred.getInstance().setError(ErrorType.PROBLEMS_READING_DOCENTES_FILE);\r\n\r\n        return true;\r\n    }\r\n\r\n    public boolean adicionaPropostasDeFicheiro(String nomeFicheiro){\r\n\r\n        try (FileReader fr = new FileReader(nomeFicheiro);\r\n             BufferedReader br = new BufferedReader(fr)) {\r\n\r\n            String line;\r\n            while ((line = br.readLine()) != null){\r\n                String[] tokens = line.split(\",\");\r\n\r\n                switch (tokens[0]){\r\n                    case \"T1\", \"T2\" -> {\r\n                        if(tokens.length == 6)\r\n                            adicionaProposta(tokens[0], tokens[1], tokens[3], Long.parseLong(tokens[5]), tokens[2], tokens[4]); // com numero de aluno associado\r\n                        else\r\n                            adicionaProposta(tokens[0], tokens[1], tokens[3], tokens[2], tokens[4]); // sem numero de aluno associado\r\n                    }\r\n                    case \"T3\" -> adicionaProposta(tokens[0], tokens[1], tokens[2], Long.parseLong(tokens[3]));\r\n                }\r\n            }\r\n\r\n        } catch (FileNotFoundException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.FILE_NOT_FOUND);\r\n        } catch (IOException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.IO_EXCEPTION);\r\n        }\r\n\r\n        if(ErrorOccurred.getInstance().getLastError() != ErrorType.NONE)\r\n            ErrorOccurred.getInstance().setError(ErrorType.PROBLEMS_READING_PROPOSTAS_FILE);\r\n\r\n        return true;\r\n    }\r\n\r\n    public boolean adicionaCandidaturaDeFicheiro(String nomeFicheiro){\r\n\r\n        try(FileReader fr = new FileReader(nomeFicheiro);\r\n            BufferedReader br = new BufferedReader(fr)){\r\n\r\n            String line;\r\n            while((line = br.readLine()) != null){\r\n\r\n                String[] tokens = line.split(\",\");\r\n\r\n                adicionaCandidatura(Long.parseLong(tokens[0]), new ArrayList<>(\r\n                        List.of(Arrays.copyOfRange(tokens, 1, tokens.length)))\r\n                );\r\n\r\n            }\r\n\r\n        } catch (FileNotFoundException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.FILE_NOT_FOUND);\r\n        } catch (IOException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.IO_EXCEPTION);\r\n        }\r\n\r\n        if(ErrorOccurred.getInstance().getLastError() != ErrorType.NONE)\r\n            ErrorOccurred.getInstance().setError(ErrorType.PROBLEMS_READING_CANDIDATURAS_FILE);\r\n\r\n        return true;\r\n    }\r\n\r\n    public boolean exportAlunosCsv(String filename){\r\n        try(PrintWriter pw = new PrintWriter(\r\n                new BufferedWriter(\r\n                        new FileWriter(filename)\r\n                )\r\n        )\r\n        ){\r\n\r\n            StringBuilder sb = new StringBuilder();\r\n\r\n            for(var aluno : apoioPOE.getAlunos()){\r\n\r\n                sb.append(aluno.getNAluno()).append(\",\").append(aluno.getNome()).append(\",\");\r\n                sb.append(aluno.getEmail()).append(\",\").append(aluno.getSiglaCurso()).append(\",\");\r\n                sb.append(aluno.getSiglaRamo()).append(\",\").append(aluno.getClassificacao()).append(\",\");\r\n                sb.append(aluno.isAcessoEstagio()).append(System.lineSeparator());\r\n            }\r\n\r\n            pw.print(sb);\r\n\r\n        }catch (IOException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.IO_EXCEPTION);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    public boolean exportDocentesCsv(String filename){\r\n        try(PrintWriter pw = new PrintWriter(\r\n                new BufferedWriter(\r\n                        new FileWriter(filename)\r\n                )\r\n        )\r\n        ){\r\n\r\n            StringBuilder sb = new StringBuilder();\r\n\r\n            for(var docente : apoioPOE.getDocentes()){\r\n\r\n                sb.append(docente.getNome()).append(\",\").append(docente.getEmail()).append(System.lineSeparator());\r\n\r\n            }\r\n\r\n            pw.print(sb);\r\n\r\n        } catch (IOException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.IO_EXCEPTION);\r\n        }\r\n        return true;\r\n    }\r\n    public boolean exportPropostasCsv(String filename){\r\n        try(PrintWriter pw = new PrintWriter(\r\n                new BufferedWriter(\r\n                        new FileWriter(filename)\r\n                )\r\n        )\r\n        ){\r\n\r\n            StringBuilder sb = new StringBuilder();\r\n\r\n            for(var proposta : apoioPOE.getPropostas()){\r\n\r\n                if(proposta instanceof Estagio e) {\r\n                    sb.append(\"T1,\").append(e.getId()).append(\",\").append(e.getAreasDestino()).append(\",\");\r\n                    sb.append(e.getTitulo()).append(\",\").append(e.getEntidadeAcolhimento());\r\n\r\n                    if (e.getNAlunoAssociado() != 0)\r\n                        sb.append(\",\").append(e.getNAlunoAssociado());\r\n\r\n                    sb.append(System.lineSeparator());\r\n\r\n                } else if (proposta instanceof Projeto p) {\r\n                    sb.append(\"T2,\").append(p.getId()).append(\",\").append(p.getRamosDestino()).append(\",\");\r\n                    sb.append(p.getTitulo()).append(\",\").append(p.getEmailDocente());\r\n\r\n                    if (p.getNAlunoAssociado() != 0)\r\n                        sb.append(\",\").append(p.getNAlunoAssociado());\r\n\r\n                    sb.append(System.lineSeparator());\r\n                }\r\n                else if(proposta instanceof Autoproposto a){\r\n                    sb.append(\"T3,\").append(a.getId()).append(\",\").append(a.getTitulo()).append(\",\");\r\n                    sb.append(a.getNAlunoAssociado()).append(System.lineSeparator());\r\n                }\r\n            }\r\n            pw.print(sb);\r\n\r\n        }catch (IOException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.IO_EXCEPTION);\r\n        }\r\n        return true;\r\n    }\r\n    public boolean exportCandidaturasCsv(String filename){\r\n        try(PrintWriter pw = new PrintWriter(\r\n                new BufferedWriter(\r\n                        new FileWriter(filename)\r\n                )\r\n        )\r\n        ){\r\n\r\n            StringBuilder sb = new StringBuilder();\r\n\r\n            for(var candidatura : apoioPOE.getCandidaturas()){\r\n\r\n                sb.append(candidatura.getNAluno());\r\n\r\n                for(var proposta : candidatura.getIdPropostas())\r\n                    sb.append(\",\").append(proposta);\r\n\r\n                sb.append(System.lineSeparator());\r\n            }\r\n\r\n            pw.print(sb);\r\n\r\n        }catch (IOException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.IO_EXCEPTION);\r\n        }\r\n        return true;\r\n    }\r\n    public boolean exportPropostasAtribuidasCsv(String filename, boolean guardarOrientador){\r\n        try(PrintWriter pw = new PrintWriter(\r\n                new BufferedWriter(\r\n                        new FileWriter(filename)\r\n                )\r\n        )\r\n        ){\r\n\r\n            StringBuilder sb = new StringBuilder();\r\n\r\n            for(var propostaAtribuida : apoioPOE.getPropostasAtribuidas()){\r\n\r\n                sb.append(propostaAtribuida.getId()).append(\",\").append(propostaAtribuida.getNAlunoAssociado());\r\n                sb.append(\",\").append(propostaAtribuida.getOrdemPreferencia());\r\n\r\n                if(guardarOrientador && propostaAtribuida.getEmailDocenteOrientador() != null)\r\n                    sb.append(\",\").append(propostaAtribuida.getEmailDocenteOrientador());\r\n\r\n                sb.append(System.lineSeparator());\r\n            }\r\n\r\n            pw.print(sb);\r\n\r\n        }catch (IOException e) {\r\n            ErrorOccurred.getInstance().setError(ErrorType.IO_EXCEPTION);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private ApoioPoE getApoioPOE(){return apoioPOE.clone();}\r\n\r\n    private static class ApoioPoEManagerMemento implements IMemento{\r\n\r\n        private final ApoioPoE apoioPOE;\r\n\r\n        ApoioPoEManagerMemento(ApoioPoEManager base) {\r\n            this.apoioPOE = base.getApoioPOE();\r\n        }\r\n\r\n        @Override\r\n        public ApoioPoE getSnapshot() {\r\n            return apoioPOE;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public IMemento save() {\r\n        return new ApoioPoEManagerMemento(this);\r\n    }\r\n\r\n    @Override\r\n    public void restore(IMemento memento) {\r\n\r\n        if(memento instanceof ApoioPoEManagerMemento apoioPoEManagerMemento){\r\n            this.apoioPOE = apoioPoEManagerMemento.getSnapshot();\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoEManager.java b/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoEManager.java
--- a/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoEManager.java	(revision 7ab6e6c76968c5d0d677035dada17e6b6986f71c)
+++ b/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoEManager.java	(date 1655392299249)
@@ -128,7 +128,7 @@
     }
 
     public boolean propostasSufecienteParaRamo(String ramo) {
-        return apoioPOE.propostasSufecienteParaRamo(ramo);
+        return apoioPOE.propostasSuficienteParaRamo(ramo);
     }
 
     public boolean todasCandidaturasComPropostaAtribuida() {
Index: .idea/scopes/TP.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/scopes/TP.xml b/.idea/scopes/TP.xml
new file mode 100644
--- /dev/null	(date 1655396459768)
+++ b/.idea/scopes/TP.xml	(date 1655396459768)
@@ -0,0 +1,3 @@
+<component name="DependencyValidationManager">
+  <scope name="TP" pattern="src[TrabalhoPratico]:pt.isec.pa.apoio_poe.model.data..*||src[TrabalhoPratico]:pt.isec.pa.apoio_poe.model.errorHandling..*||src[TrabalhoPratico]:pt.isec.pa.apoio_poe.model.fsm.ApoioPoEContext" />
+</component>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 7ab6e6c76968c5d0d677035dada17e6b6986f71c)
+++ b/.idea/misc.xml	(date 1655387949267)
@@ -1,5 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/TrabalhoPratico/pom.xml" />
+      </list>
+    </option>
+  </component>
   <component name="ProjectRootManager" version="2" project-jdk-name="17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
Index: .idea/libraries/Maven__org_openjfx_javafx_base_17_0_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_base_17_0_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_base_17_0_1.xml
new file mode 100644
--- /dev/null	(date 1655387948838)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_base_17_0_1.xml	(date 1655387948838)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-base:17.0.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/17.0.1/javafx-base-17.0.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/17.0.1/javafx-base-17.0.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/17.0.1/javafx-base-17.0.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_controls_17_0_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_controls_17_0_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_controls_17_0_1.xml
new file mode 100644
--- /dev/null	(date 1655387949057)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_controls_17_0_1.xml	(date 1655387949057)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-controls:17.0.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/17.0.1/javafx-controls-17.0.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/17.0.1/javafx-controls-17.0.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/17.0.1/javafx-controls-17.0.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"JavacSettings\">\r\n    <option name=\"ADDITIONAL_OPTIONS_OVERRIDE\">\r\n      <module name=\"TrabalhoPratico\" options=\"--add-modules java.base,java.desktop\" />\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision 7ab6e6c76968c5d0d677035dada17e6b6986f71c)
+++ b/.idea/compiler.xml	(date 1655387949284)
@@ -1,8 +1,21 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="TrabalhoPratico" />
+      </profile>
+    </annotationProcessing>
+    <bytecodeTargetLevel>
+      <module name="TrabalhoPratico" target="17" />
+    </bytecodeTargetLevel>
+  </component>
   <component name="JavacSettings">
     <option name="ADDITIONAL_OPTIONS_OVERRIDE">
-      <module name="TrabalhoPratico" options="--add-modules java.base,java.desktop" />
+      <module name="TrabalhoPratico" options="" />
     </option>
   </component>
 </project>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_base_win_17_0_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_base_win_17_0_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_base_win_17_0_1.xml
new file mode 100644
--- /dev/null	(date 1655387948993)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_base_win_17_0_1.xml	(date 1655387948993)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-base:win:17.0.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/17.0.1/javafx-base-17.0.1-win.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/17.0.1/javafx-base-17.0.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-base/17.0.1/javafx-base-17.0.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_graphics_17_0_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_graphics_17_0_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_graphics_17_0_1.xml
new file mode 100644
--- /dev/null	(date 1655387949145)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_graphics_17_0_1.xml	(date 1655387949145)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-graphics:17.0.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/17.0.1/javafx-graphics-17.0.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/17.0.1/javafx-graphics-17.0.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/17.0.1/javafx-graphics-17.0.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_openjfx_javafx_controls_win_17_0_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_controls_win_17_0_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_controls_win_17_0_1.xml
new file mode 100644
--- /dev/null	(date 1655387949102)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_controls_win_17_0_1.xml	(date 1655387949102)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-controls:win:17.0.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/17.0.1/javafx-controls-17.0.1-win.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/17.0.1/javafx-controls-17.0.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-controls/17.0.1/javafx-controls-17.0.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1655387949313)
+++ b/.idea/jarRepositories.xml	(date 1655387949313)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2239089f-0a11-4168-b998-ec0f481ff2a7\" name=\"Changes\" comment=\"alteração de organização de pastas\">\r\n      <change afterPath=\"$PROJECT_DIR$/TrabalhoPratico/.idea/.name\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/TrabalhoPratico/TrabalhoPratico.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/TrabalhoPratico/TrabalhoPratico.iml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"28aCP82tPWfJHilkURrJ1kv3c9s\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"last_opened_file_path\": \"D:/Desktop/Escola/ISEC/Licenciatura de Engenharia Informática/Cadeiras/2º Ano/2º Semestre/Programação Avançada/Trabalho Prático/TrabalhoPratico\",\r\n    \"project.structure.last.edited\": \"Global Libraries\",\r\n    \"project.structure.proportion\": \"0.0\",\r\n    \"project.structure.side.proportion\": \"0.0\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"pt.isec.pa.apoio_poe.Main\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"pt.isec.pa.apoio_poe.Main\" />\r\n      <module name=\"TrabalhoPratico\" />\r\n      <option name=\"VM_PARAMETERS\" value=\"--module-path &quot;C:\\Program Files\\Java\\javafx-sdk-17.0.2\\lib&quot; --add-modules=javafx.controls\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"pt.isec.pa.apoio_poe.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2239089f-0a11-4168-b998-ec0f481ff2a7\" name=\"Changes\" comment=\"\" />\r\n      <created>1651445284307</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1651445284307</updated>\r\n      <workItem from=\"1651445286868\" duration=\"102000\" />\r\n      <workItem from=\"1651445549961\" duration=\"9000\" />\r\n      <workItem from=\"1654853599371\" duration=\"271000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"alteração de organização de pastas\">\r\n      <created>1651445362104</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651445362104</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"alteração de organização de pastas\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"alteração de organização de pastas\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7ab6e6c76968c5d0d677035dada17e6b6986f71c)
+++ b/.idea/workspace.xml	(date 1655396459737)
@@ -1,11 +1,15 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
     <list default="true" id="2239089f-0a11-4168-b998-ec0f481ff2a7" name="Changes" comment="alteração de organização de pastas">
-      <change afterPath="$PROJECT_DIR$/TrabalhoPratico/.idea/.name" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/TrabalhoPratico/TrabalhoPratico.iml" beforeDir="false" afterPath="$PROJECT_DIR$/TrabalhoPratico/TrabalhoPratico.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoE.java" beforeDir="false" afterPath="$PROJECT_DIR$/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoE.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoEManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/TrabalhoPratico/src/main/java/pt/isec/pa/apoio_poe/model/data/ApoioPoEManager.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -17,6 +21,18 @@
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
+  </component>
+  <component name="MavenImportPreferences">
+    <option name="generalSettings">
+      <MavenGeneralSettings>
+        <option name="useMavenConfig" value="true" />
+      </MavenGeneralSettings>
+    </option>
+  </component>
+  <component name="NamedScopeManager">
+    <order>
+      <scope name="TP" />
+    </order>
   </component>
   <component name="ProjectId" id="28aCP82tPWfJHilkURrJ1kv3c9s" />
   <component name="ProjectLevelVcsManager">
@@ -26,18 +42,7 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "last_opened_file_path": "D:/Desktop/Escola/ISEC/Licenciatura de Engenharia Informática/Cadeiras/2º Ano/2º Semestre/Programação Avançada/Trabalho Prático/TrabalhoPratico",
-    "project.structure.last.edited": "Global Libraries",
-    "project.structure.proportion": "0.0",
-    "project.structure.side.proportion": "0.0"
-  }
-}]]></component>
-  <component name="RunManager">
+  <component name="RunManager" selected="Maven.TrabalhoPratico [javafx:run]">
     <configuration name="pt.isec.pa.apoio_poe.Main" type="Application" factoryName="Application" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="pt.isec.pa.apoio_poe.Main" />
       <module name="TrabalhoPratico" />
@@ -52,6 +57,36 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
+    <configuration name="TrabalhoPratico [javafx:run]" type="MavenRunConfiguration" factoryName="Maven" temporary="true">
+      <MavenSettings>
+        <option name="myGeneralSettings" />
+        <option name="myRunnerSettings" />
+        <option name="myRunnerParameters">
+          <MavenRunnerParameters>
+            <option name="profiles">
+              <set />
+            </option>
+            <option name="goals">
+              <list>
+                <option value="javafx:run" />
+              </list>
+            </option>
+            <option name="pomFileName" value="pom.xml" />
+            <option name="profilesMap">
+              <map />
+            </option>
+            <option name="resolveToWorkspace" value="false" />
+            <option name="workingDirPath" value="$PROJECT_DIR$/TrabalhoPratico" />
+          </MavenRunnerParameters>
+        </option>
+      </MavenSettings>
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Maven.TrabalhoPratico [javafx:run]" />
+      </list>
+    </recent_temporary>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
Index: .idea/libraries/Maven__org_openjfx_javafx_graphics_win_17_0_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_openjfx_javafx_graphics_win_17_0_1.xml b/.idea/libraries/Maven__org_openjfx_javafx_graphics_win_17_0_1.xml
new file mode 100644
--- /dev/null	(date 1655387949221)
+++ b/.idea/libraries/Maven__org_openjfx_javafx_graphics_win_17_0_1.xml	(date 1655387949221)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjfx:javafx-graphics:win:17.0.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/17.0.1/javafx-graphics-17.0.1-win.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/17.0.1/javafx-graphics-17.0.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/17.0.1/javafx-graphics-17.0.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
